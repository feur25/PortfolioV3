import i18next from 'i18next';
import { initReactI18next } from 'react-i18next';
import LanguageDetector from 'i18next-browser-languagedetector';
i18next
    .use(initReactI18next)
    .use(LanguageDetector)
    .init({
        fallbackLng : 'en',
        resources: {
            en : {
                translation : {
                    project : "Projects" ,
                    service : "Services",
                    blog : "Blogs",
                    about : "About",
                    contact : "Contact",
                    name : "Name",
                    contactMe : "If you want to contact me",
                    email : "Email",
                    submit : "Submit",
                    lore : "",
                    helysio : "Abandoned Minecraft Server",
                    engineer : "Video game where you play as a Robot, made on UE5",
                    toWait : "In Progress",
                    toComplete : "To Be Completed",
                    firstService : "Web Development: E-commerce / Showcase",
                    FfirstSlot : "Website mockup",
                    FsecondSlot : "Development of your choice, on the frameworks Angular, React, Laravel ...",
                    FthirdSlot : "Setting up the online server",
                    FfourthSlot : "Setting up databases (if requested)",
                    FfithSlot : "Admin Panel / Global vision of the site / Addition of new product",
                    secondService : "Java Plugin / Mods Minecraft",
                    SfirstSlot : "Plugin creation on request detailed",
                    SsecondSlot : "Mod creation, if 3D model provided beforehand",
                    SthirdSlot : "Creation of Data Packs",
                    SfourthSlot : "Setting up the server",
                    thirdService : "Video Games Learning Course",
                    TfirstSlot : "Unity Training : C#",
                    TsecondSlot : "Unreal Engine Training : C++ / .h / Blueprint",
                    TthirdSlot : "Learning how to make : UI / Widget",
                    TfourthSlot : "Game Optimization",
                    fourthService : "Initiation Web",
                    FOfirstSlot : "Web Learning",
                    FOsecondSlot : "CSS / SCSS / SASS",
                    FOthirdSlot : "Boostrap / Tailwind",
                    FOfourthSlot : "HTML / PUG",
                    FOfithSlot : "Javascript / Typescript / SQL / PHP",
                    fithService : "Software creation",
                    FIfirstSlot : "Choice of IOS or Android platform",
                    FIsecondSlot : "Choice of language if specified",
                    FIthirdSlot : "Type of software : Communication / Sales / Utility ...",
                    sixthService : "Specific language courses and learning",
                    SIfirstSlot : "Python / R / Java",
                    SIsecondSlot : "C / C++ / C#",
                    SIthirdSlot : "Golang",
                    SIfourthSlot : "JavaScript",
                    SIfithSlot : "Network and Infrastructure",
                    firsTitlelog : "AI Basics",
                    firstBlog : `Here, we are going to talk about the basics of AI and its two fundamental concepts that you might have heard of. I'm here to clearly explain what Deep Learning and Machine Learning mean, and what language is used and why. Machine Learning is a technique of Artificial Intelligence that enables a machine to learn and improve its performance in a specific task through experience. There are several types of Machine Learning, including Supervised, Unsupervised, and Reinforcement. Deep Learning is a subcategory of Machine Learning that uses artificial neural networks to learn complex data representation models. Neural networks are mathematical models that imitate the functioning of the human brain. The most widely used language for Machine Learning and Deep Learning is Python. This is due to its simplicity, flexibility, and the availability of a large number of libraries such as Scikit-learn, TensorFlow, and PyTorch. Deep Learning has revolutionized Artificial Intelligence by enabling the resolution of complex tasks such as image recognition, speech recognition, and automatic translation. Machine Learning, on the other hand, is used in many fields such as finance, healthcare, and marketing to predict outcomes or detect anomalies. In summary, Machine Learning and Deep Learning are Artificial Intelligence techniques that enable a machine to learn from data to solve specific tasks. The most widely used language to implement them is Python due to its simplicity and flexibility. These techniques have enabled the resolution of complex tasks and have many applications in many fields. You may be wondering, "Why Python?" This is a legitimate question, as Python is a long language compared to its siblings, and not all AIs are built on Python. However, there are four main reasons for this choice: 1) Simplicity: Python is an easy-to-learn and easy-to-use programming language, even for beginners. It is also more readable than other programming languages, making it easier to understand the code. 2) Flexibility: Python is a versatile programming language that allows for many different tasks. It is also compatible with many useful libraries and frameworks for Machine Learning and Deep Learning, such as Q-Learning, Keras, OpenCV, and many others. 3) Large Community: Python is supported by a large community of developers who are constantly creating new libraries and modules to help developers solve problems. This community is also very active and provides valuable support to developers who need help. 4) Good Performance: Python is an interpreted programming language, which may give the impression that it is slower than compiled languages. However, with the use of optimized libraries such as NumPy and Pandas, Python can be very fast and efficient for data processing. Due to these advantages, Python has become the preferred choice for many developers working in the field of Machine Learning and Deep Learning.`,
                    secondTitleBlog : "Golang Basics",
                    secondBlog : "",
                    thirdTitleBlog : "Python Basics",
                    thirdBlog : "",
                    fourthTitleBlog : "Web Basics",
                    fourthBlog : "",
                    fithTitleBlog : "Linux Basics",
                    fithBlog : "",
                    sixthTitleBlog : "Java Basics",
                    sixthBlog : "",
                    seventhTitleBlog : "IDE and Utility",
                    seventhBlog : `Welcome to the blog about IDE and utilities that I can offer you during your reading. First of all, I would like to remind you in my own words what an IDE is, so that we all agree and at the end, we can see which IDE is most appropriate for what you do. An IDE, or Integrated Development Environment, is a software that facilitates the software development process by bringing together several useful tools in one place. IDEs are often used by programmers to write, test, and debug computer code. Typically, an IDE includes a code editor, which is used to write the source code, as well as compilation tools, which are used to convert the source code into executable code. The IDE may also include features such as syntax highlighting, which distinguishes the different elements of the code using different colors, as well as debugging tools, which help programmers find and correct errors in their code. In summary, an IDE is software that offers programmers a complete working environment for software development, providing them with tools such as a code editor, compilation and debugging tools to simplify the software development process. Now that you understand what an IDE is, we can move on to the tools that I use and strongly recommend for any new or experienced developer. First, before choosing which IDE to select, you will need to consider what you want to do with the code and what language you will use. For example, if you simply use a well-known language like Python, you will have the basic IDLE IDE for Python with the corresponding version, but that's not very clean. What we want is a work environment where we can add new tools, such as an AI that allows us to code a little faster or perhaps put the code in different colors that we have chosen ourselves. For Python and most other languages, I strongly recommend downloading Jetbrains Toolbox, where you can find various IDEs for a particular language such as PyCharm for PYTHON or IntelliJ IDEA for JAVA, which I strongly recommend, by the way, if you are on one of these two languages, the faster you learn to handle these IDEs, the faster it will allow you to be faster in your own code (take the community version if you are not in a company, they are usually sufficient and especially free). Next, we have another IDE that is known to every developer, which is Visual Studio for companies, and for the community version, we have Visual Studio Code. Personally, I prefer Visual Studio Code even though I have Visual Studio, but in fact, it's more than Visual Studio Code that I started with and that I have become more accustomed to using, even though Visual Studio will be better, so if you are in a company, I strongly recommend it. However, it also depends on the budget level because you have to pay a license for Visual Studio whereas Visual Studio Code does not require one. But like these other IDEs, you can install extensions, and this brings us to a utility point, which may make you want to go to this IDE. Personally, I use it for the web, for example, when I use the REACT or Angular framework, I also code in C++ and this C# with this IDE. Well, we come to the moment of which utility to install on your IDE. First of all, the first one I recommend if you work in a team is to install the "Live Share" extension, which is excellent for teamwork if you have a good reason, you can open your ports to your friends or colleagues if you are working on a database so that they can access and modify your database without being on the same device or server, as your PC will simply turn into a server via Live Share, and it will allow your colleagues to code in real-time on your project. So for this one, I'll be quick since it won't interest everyone. If you don't have Wamp Server or its alternatives on Linux or Mac OS, depending on which ISO you're working on or if you don't have a server available to put your web page online, or at least a test server, you can use "Live Server" web extension with Apache or Ngnix, whichever you prefer, as your server. Don't hesitate to also install an extension to color your code and make it more readable. There are several available, so choose the one you prefer. We now come to a part that could interest many people, which are the AI tools that can help you code maybe a little faster or suggest solutions that could correspond to your current problem. You can use "BlackBox", "OpenAI Codex", or "Github Copilote". For Linux lovers who want to move to Windows for some obscure reason, I recommend installing the WSL extension, which allows you to integrate the Linux environment into your code editor, meaning you can use Linux development tools directly from Visual Studio Code. The WSL extension for Visual Studio Code offers features such as running Linux commands directly from the code editor, supporting syntax highlighting for Linux files, and supporting access to files located in the Linux environment. In summary, if you're using the WSL environment on your Windows computer and also using Visual Studio Code for your development, the WSL extension can be very useful in allowing you to work more easily with Linux development tools.`,
                    notFound : "Sorry the page is not found",
                }
            },
            fr : {
                translation : {
                    project : "Projets",
                    service : "Services",
                    blog : "Articles",
                    about : "À Propos",
                    contact : "Me Contacter",
                    name : "Nom",
                    contactMe : "Si vous souhaitez me contacter",
                    email : "Adress mail électronique",
                    submit : "Envoyez",
                    lore : "Bachelor 2 Chez Ynov a Aix-En-Provence. Je suis motivé et je souhaite devenire data scientist",
                    helysio : "Serveur Minecraft Abandonnée",
                    engineer : "Jeu vidéo ou vous incarnerais un Robot, fait sur UE5",
                    toWait : "En Cours",
                    toComplete : "À Compléter",
                    firstService : "Développement Web : E-commerce / Vitrine",
                    FfirstSlot : "Maquette du site web",
                    FsecondSlot : "Développement aux choix, sur les framework Angular, React, Laravel ...",
                    FthirdSlot : "Mise en place du serveur en Ligne",
                    FfourthSlot : "Mise en place de BDD (si demandés)",
                    FfithSlot : "Panel Administrateur / vision Global du site / Ajout de nouveau produit",
                    secondService : "Java Plugin / Mods Minecraft",
                    SfirstSlot : "Création de Plugin sur demande détaillé",
                    SsecondSlot : "Création de Mod, si Modèle 3D fournis au préalable",
                    SthirdSlot : "Création de DataPack",
                    SfourthSlot : "Mise en place du serveur",
                    thirdService : "Cours Apprentissage aux Jeux Vidéos",
                    TfirstSlot : "Fomation Unity : C#",
                    TsecondSlot : "Formation Unreal Engine : C++ / .h / Blueprint",
                    TthirdSlot : "Apprentissage de comment faire : UI / Widget",
                    TfourthSlot : "Optimisation du Jeu",
                    fourthService : "Initiation Web",
                    FOfirstSlot : "Apprentissage Web",
                    FOsecondSlot : "CSS / SCSS / SASS",
                    FOthirdSlot : "Boostrap / Tailwind",
                    FOfourthSlot : "HTML / PUG",
                    FOfithSlot : "Javascript / Typescript / SQL / PHP",
                    fithService : "Création de logiciels",
                    FIfirstSlot : "Choix de la plateforme IOS ou Android",
                    FIsecondSlot : "Choix du langage si préciser",
                    FIthirdSlot : "Type de logiciel : Communication / Vente / Utilitaire ...",
                    sixthService : "Cours et Apprentissage de langage spécifique",
                    SIfirstSlot : "Python / R / Java",
                    SIsecondSlot : "C / C++ / C#",
                    SIthirdSlot : "Golang",
                    SIfourthSlot : "JavaScript",
                    SIfithSlot : "Réseau et Infrastructure",
                    firsTitlelog : "Les Bases de L'IA",
                    firstBlog : `Ici Nous allons parler des bases de l’IA et de ces deux concept primordiaux que vous avez surement du entendre, je suis la pour vous expliquer clairement que signifie le Deep Learning et le Machine Learning, et quelle langage utilisé et pourquoi ? Le Machine Learning est une technique de l'Intelligence Artificielle qui permet à une machine d'apprendre et d'améliorer sa performance dans une tâche spécifique à travers l'expérience. Il existe plusieurs types de Machine Learning, notamment le Supervisé, le Non Supervisé et le Renforcement. Le Deep Learning est une sous-catégorie du Machine Learning qui utilise des réseaux de neurones artificiels pour apprendre des modèles de représentation des données complexes. Les réseaux de neurones sont des modèles mathématiques qui imitent le fonctionnement du cerveau humain. Le langage le plus utilisé pour le Machine Learning et le Deep Learning est Python. Cela est dû à sa simplicité, sa flexibilité et à la disponibilité d'un grand nombre de bibliothèques telles que Scikit-learn, TensorFlow et PyTorch. Le Deep Learning a révolutionné l'Intelligence Artificielle en permettant de résoudre des tâches complexes telles que la reconnaissance d'images, la reconnaissance vocale et la traduction automatique. Le Machine Learning, quant à lui, est utilisé dans de nombreux domaines tels que la finance, la santé et le marketing pour prédire des résultats ou détecter des anomalies. En résumé, le Machine Learning et le Deep Learning sont des techniques d'Intelligence Artificielle qui permettent à une machine d'apprendre à partir de données pour résoudre des tâches spécifiques. Le langage le plus utilisé pour les implémenter est Python en raison de sa simplicité et de sa flexibilité. Ces techniques ont permis de résoudre des tâches complexes et ont de nombreuses applications dans de nombreux domaines. Mais du coup vous devez surement vous posez la question mais pourquoi Python ? et c’est une question légitime, car python et très long contrairement a ses frères et sœurs, de plus les IA ne sont pas tous conçus sur Python, mais il y a 4 grandes raisons à ce choix. 1) Simplicité : Python est un langage de programmation facile à apprendre et à utiliser, même pour les débutants. Il est également plus lisible que d'autres langages de programmation, ce qui facilite la compréhension du code. 2) Flexibilité : Python est un langage de programmation polyvalent qui permet de réaliser de nombreuses tâches différentes. Il est également compatible avec de nombreuses bibliothèques et frameworks utiles pour le Machine Learning et le Deep Learning, tels que Q-Learning, Keras, OpenCV, et bien d'autres encore. 3) Une Large communauté : Python est soutenu par une grande communauté de développeurs qui créent constamment de nouvelles bibliothèques et modules pour aider les développeurs à résoudre des problèmes. Cette communauté est également très active et offre un soutien précieux aux développeurs qui ont besoin d'aide. 4) Bonnes performances : Python est un langage de programmation interprété, ce qui peut donner l'impression qu'il est plus lent que les langages compilés. Cependant, avec l'utilisation de bibliothèques optimisées telles que NumPy et Pandas, Python peut être très rapide et efficace pour le traitement de données. En raison de ces avantages, Python est devenu le choix privilégié pour de nombreux développeurs travaillant dans le domaine du Machine Learning et du Deep Learning.`,
                    secondTitleBlog : "Les Bases du Golang",
                    secondBlog : "",
                    thirdTitleBlog : "Les Bases du Python",
                    thirdBlog : "",
                    fourthTitleBlog : "Les Bases du Web",
                    fourthBlog : "",
                    fithTitleBlog : "Les Bases de Linux",
                    fithBlog : "",
                    sixthTitleBlog : "Les Bases de Java",
                    sixthBlog : "",
                    seventhTitleBlog : "IDE et Utilitaire",
                    seventhBlog : `Vous voici sur le Blog traitent des IDE et des utilitaires, que je peut vous apporter au cours de votre lecture. Tout d’abord j’aimerais bien vous rappeler avec mes propres termes qu’es qu’un IDE, pour que l’ont soit tous d’accord et pouvoir a la fin, voir quel IDE vous serez le plus approprié en fonction de ce que vous faites. Un IDE, ou environnement de développement intégré (en anglais, Integrated Development Environment), est un logiciel qui facilite le processus de développement de logiciels en regroupant plusieurs outils utiles en un seul endroit. Les IDE sont souvent utilisés par les programmeurs pour écrire, tester et déboguer du code informatique. Typiquement, un IDE comprend un éditeur de code, qui est utilisé pour écrire le code source, ainsi que des outils de compilation, qui sont utilisés pour convertir le code source en code exécutable. L'IDE peut également inclure des fonctionnalités telles que la coloration syntaxique, qui permet de distinguer les différents éléments du code en utilisant des couleurs différentes, ainsi que des outils de débogage, qui aident les programmeurs à trouver et à corriger les erreurs dans leur code. En résumé, un IDE est un logiciel qui offre aux programmeurs un environnement de travail complet pour le développement de logiciels, en leur fournissant des outils tels qu'un éditeur de code, des outils de compilation et de débogage, afin de simplifier le processus de développement de logiciels. Maintenant que vous avez compris ce qu'est IDE, on va pouvoir passer aux outils que moi je t'utilise, et que je recommande fortement pour tout nouveau développeur ou développeur aguerri bien évidemment. Tout d'abord avant de choisir quel IDE sélectionner. Il faudra vous pencher sur la question qu'est-ce que vous souhaitez faire avec le code et quelle langage vous allez utiliser. En effet si vous faites tout simplement un langage connu comme le python, vous aurez l'ide de base qui est IDLE de python avec la version qui lui correspond, mais c'est pas très propre nous ce que l'on veut c'est un environnement de travail où on peut ajouter de nouveaux outils par exemple une IA qui nous permet de coder un peu plus vite ou peut-être mettre le code dans différentes couleurs que nous aurons choisies nous-mêmes. pour python et la plupart des autres langages je vous recommande fortement de télécharger Jetbrains Toolbox, ou vous pourrez retrouver diverses IDE destinées a un langage en particulier comme PyCharm pour PYTHON, ou bien IntelliJ IDEA pour JAVA, que je recommande fortement d’ailleurs si vous êtes sur l’un de ces deux langage plus vite vous apprendrez a manier c’est IDE, plus vite cela vous permettra d’être plus rapide dans votre propre code (prenez les communautaire si vous n’êtes pas en entreprise, ils ont bien suffisant dans la plus part des cas et surtout gratuit). Après nous avons un autre IDE qui est de base connue de tout développeur c'est Visual Studio pour les entreprises, et pour la version  communautaire Visual Studio code, personnellement je préfère Visual Studio code même si j'ai Visual Studio mais en fait c'est plus que Visual Studio code j'ai commencé avec et que j'ai pris plus l'habitude de l'utiliser même si Visual Studio sera mieux donc si vous êtes en entreprise je vous le conseille fortement, après tout dépend aussi du niveau de budget parce qu'il faut payer une licence pour Visual Studio alors que Visual Studio code non. Mais comme ces autres confrères vous pourrez installer des extensions, et là on arrive à un point le point utilitaire celui qui va vous donner envie peut-être d'aller sur cette IDE, personnellement j'utilise pour le web par exemple quand j'utilise le framework REACT ou Angular, h je code aussi en C++ et cette C# avec cette IDE. très bien on arrive au moment quel utilitaire installé sur son IDE, tout Premièrement le premier que je conseille si vous travaillez en équipe, installer l'extension « Live Share », excellent pour le travail d'équipe enfin si vous avez une bonne cause bien évidemment, vous pourrez ouvrir vos ports à vos amis ou vos collègues si vous êtes en train de réaliser une base de données pour qu'ils arrivent à accéder à votre base de données et la modifier sans être sur le même appareil ou le même serveur car votre PC se transformera tout simplement en serveur via Live Share, et surtout ça permettra à vos collègues de coder en temps réel sur votre projet. Alors pour celui-là je vais être rapide car il ne va pas intéresser tout le monde, une extension web si vous ne possédez pas wamp Server ou alors ces alternatives sur Linux ou Mac OS tout dépend où vous travaillez sur quelle ISO, ou alors que vous n'avez vraiment pas de serveur à disposition pour mettre en ligne votre page web, ou en tout cas un serveur de test, avec Apache ou bien Ngnix comme vous voulez c’est « Live Server ». N’hésitez pas a installer aussi une extensions pour mettre en couleurs votre code, pour le rendre plus lisible il en existe plusieurs, donc je vous laisse choisir celui que vous préférez. Nous arrivons à une partie qui est pourrait intéressée plusieurs personnes ce sont les IA qui vont vous permettre de coder peut-être un peu plus rapidement ou vous proposez surtout des solutions qui pourraient correspondre à votre problème actuel. Vous aurez donc soit « BlackBox », ou bien « OpenAI Codex » ou encore « Github Copilote ». Pour les amoureux de Linux qui souhaite ce dirigez vers Windows pour une raisons obscure, je vous conseil d’installer l’extensions WSL qui permet d'intégrer l'environnement Linux dans l'éditeur de code, ce qui signifie que vous pouvez utiliser des outils de développement Linux directement depuis Visual Studio Code. L'extension WSL pour Visual Studio Code offre des fonctionnalités telles que l'exécution de commandes Linux directement depuis l'éditeur de code, la prise en charge de la coloration syntaxique pour les fichiers Linux, et la prise en charge de l'accès aux fichiers situés dans l'environnement Linux. En résumé, si vous utilisez l'environnement WSL sur votre ordinateur Windows et que vous utilisez également Visual Studio Code pour votre développement, l'extension WSL peut être très utile pour vous permettre de travailler plus facilement avec les outils de développement Linux.`,
                    notFound : "Navré la page n'a pas était trouvé",
                }
            }
        }
    })